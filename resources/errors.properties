TS1002=Unterminated string literal.
TS1003=Identifier expected.
TS1005='{0}' expected.
TS1006=A file cannot have a reference to itself.
TS1009=Trailing comma not allowed.
TS1010='*/' expected.
TS1012=Unexpected token.
TS1014=A rest parameter must be last in a parameter list.
TS1015=Parameter cannot have question mark and initializer.
TS1016=A required parameter cannot follow an optional parameter.
TS1017=An index signature cannot have a rest parameter.
TS1018=An index signature parameter cannot have an accessibility modifier.
TS1019=An index signature parameter cannot have a question mark.
TS1020=An index signature parameter cannot have an initializer.
TS1021=An index signature must have a type annotation.
TS1022=An index signature parameter must have a type annotation.
TS1023=An index signature parameter type must be 'string' or 'number'.
TS1024='readonly' modifier can only appear on a property declaration or index signature.
TS1028=Accessibility modifier already seen.
TS1029='{0}' modifier must precede '{1}' modifier.
TS1030='{0}' modifier already seen.
TS1031='{0}' modifier cannot appear on a class element.
TS1034='super' must be followed by an argument list or member access.
TS1035=Only ambient modules can use quoted names.
TS1036=Statements are not allowed in ambient contexts.
TS1038=A 'declare' modifier cannot be used in an already ambient context.
TS1039=Initializers are not allowed in ambient contexts.
TS1040='{0}' modifier cannot be used in an ambient context.
TS1041='{0}' modifier cannot be used with a class declaration.
TS1042='{0}' modifier cannot be used here.
TS1043='{0}' modifier cannot appear on a data property.
TS1044='{0}' modifier cannot appear on a module or namespace element.
TS1045=A '{0}' modifier cannot be used with an interface declaration.
TS1046=A 'declare' modifier is required for a top level declaration in a .d.ts file.
TS1047=A rest parameter cannot be optional.
TS1048=A rest parameter cannot have an initializer.
TS1049=A 'set' accessor must have exactly one parameter.
TS1051=A 'set' accessor cannot have an optional parameter.
TS1052=A 'set' accessor parameter cannot have an initializer.
TS1053=A 'set' accessor cannot have rest parameter.
TS1054=A 'get' accessor cannot have parameters.
TS1055=Type '{0}' is not a valid async function return type in ES5/ES3 because it does not refer to a Promise-compatible constructor value.
TS1056=Accessors are only available when targeting ECMAScript 5 and higher.
TS1057=An async function or method must have a valid awaitable return type.
TS1058=Operand for 'await' does not have a valid callable 'then' member.
TS1059=Return expression in async function does not have a valid callable 'then' member.
TS1060=Expression body for async arrow function does not have a valid callable 'then' member.
TS1061=Enum member must have initializer.
TS1062={0} is referenced directly or indirectly in the fulfillment callback of its own 'then' method.
TS1063=An export assignment cannot be used in a namespace.
TS1064=The return type of an async function or method must be the global Promise<T> type.
TS1066=In ambient enum declarations member initializer must be constant expression.
TS1068=Unexpected token. A constructor, method, accessor, or property was expected.
TS1070='{0}' modifier cannot appear on a type member.
TS1071='{0}' modifier cannot appear on an index signature.
TS1079=A '{0}' modifier cannot be used with an import declaration.
TS1084=Invalid 'reference' directive syntax.
TS1085=Octal literals are not available when targeting ECMAScript 5 and higher. Use the syntax '{0}'.
TS1086=An accessor cannot be declared in an ambient context.
TS1089='{0}' modifier cannot appear on a constructor declaration.
TS1090='{0}' modifier cannot appear on a parameter.
TS1091=Only a single variable declaration is allowed in a 'for...in' statement.
TS1092=Type parameters cannot appear on a constructor declaration.
TS1093=Type annotation cannot appear on a constructor declaration.
TS1094=An accessor cannot have type parameters.
TS1095=A 'set' accessor cannot have a return type annotation.
TS1096=An index signature must have exactly one parameter.
TS1097='{0}' list cannot be empty.
TS1098=Type parameter list cannot be empty.
TS1099=Type argument list cannot be empty.
TS1100=Invalid use of '{0}' in strict mode.
TS1101='with' statements are not allowed in strict mode.
TS1102='delete' cannot be called on an identifier in strict mode.
TS1104=A 'continue' statement can only be used within an enclosing iteration statement.
TS1105=A 'break' statement can only be used within an enclosing iteration or switch statement.
TS1107=Jump target cannot cross function boundary.
TS1108=A 'return' statement can only be used within a function body.
TS1109=Expression expected.
TS1110=Type expected.
TS1113=A 'default' clause cannot appear more than once in a 'switch' statement.
TS1114=Duplicate label '{0}'
TS1115=A 'continue' statement can only jump to a label of an enclosing iteration statement.
TS1116=A 'break' statement can only jump to a label of an enclosing statement.
TS1117=An object literal cannot have multiple properties with the same name in strict mode.
TS1118=An object literal cannot have multiple get/set accessors with the same name.
TS1119=An object literal cannot have property and accessor with the same name.
TS1120=An export assignment cannot have modifiers.
TS1121=Octal literals are not allowed in strict mode.
TS1122=A tuple type element list cannot be empty.
TS1123=Variable declaration list cannot be empty.
TS1124=Digit expected.
TS1125=Hexadecimal digit expected.
TS1126=Unexpected end of text.
TS1127=Invalid character.
TS1128=Declaration or statement expected.
TS1129=Statement expected.
TS1130='case' or 'default' expected.
TS1131=Property or signature expected.
TS1132=Enum member expected.
TS1134=Variable declaration expected.
TS1135=Argument expression expected.
TS1136=Property assignment expected.
TS1137=Expression or comma expected.
TS1138=Parameter declaration expected.
TS1139=Type parameter declaration expected.
TS1140=Type argument expected.
TS1141=String literal expected.
TS1142=Line break not permitted here.
TS1144='{' or ';' expected.
TS1146=Declaration expected.
TS1147=Import declarations in a namespace cannot reference a module.
TS1148=Cannot use imports, exports, or module augmentations when '--module' is 'none'.
TS1149=File name '{0}' differs from already included file name '{1}' only in casing
TS1150='new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.
TS1155='const' declarations must be initialized
TS1156='const' declarations can only be declared inside a block.
TS1157='let' declarations can only be declared inside a block.
TS1160=Unterminated template literal.
TS1161=Unterminated regular expression literal.
TS1162=An object member cannot be declared optional.
TS1163=A 'yield' expression is only allowed in a generator body.
TS1164=Computed property names are not allowed in enums.
TS1165=A computed property name in an ambient context must directly refer to a built-in symbol.
TS1166=A computed property name in a class property declaration must directly refer to a built-in symbol.
TS1168=A computed property name in a method overload must directly refer to a built-in symbol.
TS1169=A computed property name in an interface must directly refer to a built-in symbol.
TS1170=A computed property name in a type literal must directly refer to a built-in symbol.
TS1171=A comma expression is not allowed in a computed property name.
TS1172='extends' clause already seen.
TS1173='extends' clause must precede 'implements' clause.
TS1174=Classes can only extend a single class.
TS1175='implements' clause already seen.
TS1176=Interface declaration cannot have 'implements' clause.
TS1177=Binary digit expected.
TS1178=Octal digit expected.
TS1179=Unexpected token. '{' expected.
TS1180=Property destructuring pattern expected.
TS1181=Array element destructuring pattern expected.
TS1182=A destructuring declaration must have an initializer.
TS1183=An implementation cannot be declared in ambient contexts.
TS1184=Modifiers cannot appear here.
TS1185=Merge conflict marker encountered.
TS1186=A rest element cannot have an initializer.
TS1187=A parameter property may not be declared using a binding pattern.
TS1188=Only a single variable declaration is allowed in a 'for...of' statement.
TS1189=The variable declaration of a 'for...in' statement cannot have an initializer.
TS1190=The variable declaration of a 'for...of' statement cannot have an initializer.
TS1191=An import declaration cannot have modifiers.
TS1192=Module '{0}' has no default export.
TS1193=An export declaration cannot have modifiers.
TS1194=Export declarations are not permitted in a namespace.
TS1196=Catch clause variable cannot have a type annotation.
TS1197=Catch clause variable cannot have an initializer.
TS1198=An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.
TS1199=Unterminated Unicode escape sequence.
TS1200=Line terminator not permitted before arrow.
TS1202=Import assignment cannot be used when targeting ECMAScript 2015 modules. Consider using 'import * as ns from "mod"', 'import {a} from "mod"', 'import d from "mod"', or another module format instead.
TS1203=Export assignment cannot be used when targeting ECMAScript 2015 modules. Consider using 'export default' or another module format instead.
TS1206=Decorators are not valid here.
TS1207=Decorators cannot be applied to multiple get/set accessors of the same name.
TS1208=Cannot compile namespaces when the '--isolatedModules' flag is provided.
TS1209=Ambient const enums are not allowed when the '--isolatedModules' flag is provided.
TS1210=Invalid use of '{0}'. Class definitions are automatically in strict mode.
TS1211=A class declaration without the 'default' modifier must have a name
TS1212=Identifier expected. '{0}' is a reserved word in strict mode
TS1213=Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode.
TS1214=Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode.
TS1215=Invalid use of '{0}'. Modules are automatically in strict mode.
TS1218=Export assignment is not supported when '--module' flag is 'system'.
TS1219=Experimental support for decorators is a feature that is subject to change in a future release. Set the 'experimentalDecorators' option to remove this warning.
TS1220=Generators are only available when targeting ECMAScript 2015 or higher.
TS1221=Generators are not allowed in an ambient context.
TS1222=An overload signature cannot be declared as a generator.
TS1223='{0}' tag already specified.
TS1224=Signature '{0}' must have a type predicate.
TS1225=Cannot find parameter '{0}'.
TS1226=Type predicate '{0}' is not assignable to '{1}'.
TS1227=Parameter '{0}' is not in the same position as parameter '{1}'.
TS1228=A type predicate is only allowed in return type position for functions and methods.
TS1229=A type predicate cannot reference a rest parameter.
TS1230=A type predicate cannot reference element '{0}' in a binding pattern.
TS1231=An export assignment can only be used in a module.
TS1232=An import declaration can only be used in a namespace or module.
TS1233=An export declaration can only be used in a module.
TS1234=An ambient module declaration is only allowed at the top level in a file.
TS1235=A namespace declaration is only allowed in a namespace or module.
TS1236=The return type of a property decorator function must be either 'void' or 'any'.
TS1237=The return type of a parameter decorator function must be either 'void' or 'any'.
TS1238=Unable to resolve signature of class decorator when called as an expression.
TS1239=Unable to resolve signature of parameter decorator when called as an expression.
TS1240=Unable to resolve signature of property decorator when called as an expression.
TS1241=Unable to resolve signature of method decorator when called as an expression.
TS1242='abstract' modifier can only appear on a class, method, or property declaration.
TS1243='{0}' modifier cannot be used with '{1}' modifier.
TS1244=Abstract methods can only appear within an abstract class.
TS1245=Method '{0}' cannot have an implementation because it is marked abstract.
TS1246=An interface property cannot have an initializer.
TS1247=A type literal property cannot have an initializer.
TS1248=A class member cannot have the '{0}' keyword.
TS1249=A decorator can only decorate a method implementation, not an overload.
TS1250=Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'.
TS1251=Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Class definitions are automatically in strict mode.
TS1252=Function declarations are not allowed inside blocks in strict mode when targeting 'ES3' or 'ES5'. Modules are automatically in strict mode.
TS1253='{0}' tag cannot be used independently as a top level JSDoc tag.
TS1254=A 'const' initializer in an ambient context must be a string or numeric literal.
TS1300='with' statements are not allowed in an async function block.
TS1308='await' expression is only allowed within an async function.
TS1312='=' can only be used in an object literal property inside a destructuring assignment.
TS1313=The body of an 'if' statement cannot be the empty statement.
TS1314=Global module exports may only appear in module files.
TS1315=Global module exports may only appear in declaration files.
TS1316=Global module exports may only appear at top level.
TS1317=A parameter property cannot be declared using a rest parameter.
TS1318=An abstract accessor cannot have an implementation.
TS2300=Duplicate identifier '{0}'.
TS2301=Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.
TS2302=Static members cannot reference class type parameters.
TS2303=Circular definition of import alias '{0}'.
TS2304=Cannot find name '{0}'.
TS2305=Module '{0}' has no exported member '{1}'.
TS2306=File '{0}' is not a module.
TS2307=Cannot find module '{0}'.
TS2308=Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity.
TS2309=An export assignment cannot be used in a module with other exported elements.
TS2310=Type '{0}' recursively references itself as a base type.
TS2311=A class may only extend another class.
TS2312=An interface may only extend a class or another interface.
TS2313=Type parameter '{0}' has a circular constraint.
TS2314=Generic type '{0}' requires {1} type argument(s).
TS2315=Type '{0}' is not generic.
TS2316=Global type '{0}' must be a class or interface type.
TS2317=Global type '{0}' must have {1} type parameter(s).
TS2318=Cannot find global type '{0}'.
TS2319=Named property '{0}' of types '{1}' and '{2}' are not identical.
TS2320=Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'.
TS2321=Excessive stack depth comparing types '{0}' and '{1}'.
TS2322=Type '{0}' is not assignable to type '{1}'.
TS2323=Cannot redeclare exported variable '{0}'.
TS2324=Property '{0}' is missing in type '{1}'.
TS2325=Property '{0}' is private in type '{1}' but not in type '{2}'.
TS2326=Types of property '{0}' are incompatible.
TS2327=Property '{0}' is optional in type '{1}' but required in type '{2}'.
TS2328=Types of parameters '{0}' and '{1}' are incompatible.
TS2329=Index signature is missing in type '{0}'.
TS2330=Index signatures are incompatible.
TS2331='this' cannot be referenced in a module or namespace body.
TS2332='this' cannot be referenced in current location.
TS2333='this' cannot be referenced in constructor arguments.
TS2334='this' cannot be referenced in a static property initializer.
TS2335='super' can only be referenced in a derived class.
TS2336='super' cannot be referenced in constructor arguments.
TS2337=Super calls are not permitted outside constructors or in nested functions inside constructors.
TS2338='super' property access is permitted only in a constructor, member function, or member accessor of a derived class.
TS2339=Property '{0}' does not exist on type '{1}'.
TS2340=Only public and protected methods of the base class are accessible via the 'super' keyword.
TS2341=Property '{0}' is private and only accessible within class '{1}'.
TS2342=An index expression argument must be of type 'string', 'number', 'symbol', or 'any'.
TS2343=This syntax requires an imported helper named '{1}', but module '{0}' has no exported member '{1}'.
TS2344=Type '{0}' does not satisfy the constraint '{1}'.
TS2345=Argument of type '{0}' is not assignable to parameter of type '{1}'.
TS2346=Supplied parameters do not match any signature of call target.
TS2347=Untyped function calls may not accept type arguments.
TS2348=Value of type '{0}' is not callable. Did you mean to include 'new'?
TS2349=Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.
TS2350=Only a void function can be called with the 'new' keyword.
TS2351=Cannot use 'new' with an expression whose type lacks a call or construct signature.
TS2352=Type '{0}' cannot be converted to type '{1}'.
TS2353=Object literal may only specify known properties, and '{0}' does not exist in type '{1}'.
TS2354=This syntax requires an imported helper but module '{0}' cannot be found.
TS2355=A function whose declared type is neither 'void' nor 'any' must return a value.
TS2356=An arithmetic operand must be of type 'any', 'number' or an enum type.
TS2357=The operand of an increment or decrement operator must be a variable or a property access.
TS2358=The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
TS2359=The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.
TS2360=The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'.
TS2361=The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter
TS2362=The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.
TS2363=The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.
TS2364=The left-hand side of an assignment expression must be a variable or a property access.
TS2365=Operator '{0}' cannot be applied to types '{1}' and '{2}'.
TS2366=Function lacks ending return statement and return type does not include 'undefined'.
TS2368=Type parameter name cannot be '{0}'
TS2369=A parameter property is only allowed in a constructor implementation.
TS2370=A rest parameter must be of an array type.
TS2371=A parameter initializer is only allowed in a function or constructor implementation.
TS2372=Parameter '{0}' cannot be referenced in its initializer.
TS2373=Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.
TS2374=Duplicate string index signature.
TS2375=Duplicate number index signature.
TS2376=A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.
TS2377=Constructors for derived classes must contain a 'super' call.
TS2378=A 'get' accessor must return a value.
TS2379=Getter and setter accessors do not agree in visibility.
TS2380='get' and 'set' accessor must have the same type.
TS2381=A signature with an implementation cannot use a string literal type.
TS2382=Specialized overload signature is not assignable to any non-specialized signature.
TS2383=Overload signatures must all be exported or non-exported.
TS2384=Overload signatures must all be ambient or non-ambient.
TS2385=Overload signatures must all be public, private or protected.
TS2386=Overload signatures must all be optional or required.
TS2387=Function overload must be static.
TS2388=Function overload must not be static.
TS2389=Function implementation name must be '{0}'.
TS2390=Constructor implementation is missing.
TS2391=Function implementation is missing or not immediately following the declaration.
TS2392=Multiple constructor implementations are not allowed.
TS2393=Duplicate function implementation.
TS2394=Overload signature is not compatible with function implementation.
TS2395=Individual declarations in merged declaration '{0}' must be all exported or all local.
TS2396=Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.
TS2397=Declaration name conflicts with built-in global identifier '{0}'.
TS2399=Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.
TS2400=Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.
TS2401=Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.
TS2402=Expression resolves to '_super' that compiler uses to capture base class reference.
TS2403=Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.
TS2404=The left-hand side of a 'for...in' statement cannot use a type annotation.
TS2405=The left-hand side of a 'for...in' statement must be of type 'string' or 'any'.
TS2406=The left-hand side of a 'for...in' statement must be a variable or a property access.
TS2407=The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.
TS2408=Setters cannot return a value.
TS2409=Return type of constructor signature must be assignable to the instance type of the class
TS2410=The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'.
TS2411=Property '{0}' of type '{1}' is not assignable to string index type '{2}'.
TS2412=Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'.
TS2413=Numeric index type '{0}' is not assignable to string index type '{1}'.
TS2414=Class name cannot be '{0}'
TS2415=Class '{0}' incorrectly extends base class '{1}'.
TS2417=Class static side '{0}' incorrectly extends base class static side '{1}'.
TS2420=Class '{0}' incorrectly implements interface '{1}'.
TS2422=A class may only implement another class or interface.
TS2423=Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.
TS2424=Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.
TS2425=Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.
TS2426=Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.
TS2427=Interface name cannot be '{0}'
TS2428=All declarations of '{0}' must have identical type parameters.
TS2430=Interface '{0}' incorrectly extends interface '{1}'.
TS2431=Enum name cannot be '{0}'
TS2432=In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.
TS2433=A namespace declaration cannot be in a different file from a class or function with which it is merged
TS2434=A namespace declaration cannot be located prior to a class or function with which it is merged
TS2435=Ambient modules cannot be nested in other modules or namespaces.
TS2436=Ambient module declaration cannot specify relative module name.
TS2437=Module '{0}' is hidden by a local declaration with the same name
TS2438=Import name cannot be '{0}'
TS2439=Import or export declaration in an ambient module declaration cannot reference module through relative module name.
TS2440=Import declaration conflicts with local declaration of '{0}'
TS2441=Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module.
TS2442=Types have separate declarations of a private property '{0}'.
TS2443=Property '{0}' is protected but type '{1}' is not a class derived from '{2}'.
TS2444=Property '{0}' is protected in type '{1}' but public in type '{2}'.
TS2445=Property '{0}' is protected and only accessible within class '{1}' and its subclasses.
TS2446=Property '{0}' is protected and only accessible through an instance of class '{1}'.
TS2447=The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead.
TS2448=Block-scoped variable '{0}' used before its declaration.
TS2451=Cannot redeclare block-scoped variable '{0}'.
TS2452=An enum member cannot have a numeric name.
TS2453=The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.
TS2454=Variable '{0}' is used before being assigned.
TS2455=Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'.
TS2456=Type alias '{0}' circularly references itself.
TS2457=Type alias name cannot be '{0}'
TS2458=An AMD module cannot have multiple name assignments.
TS2459=Type '{0}' has no property '{1}' and no string index signature.
TS2460=Type '{0}' has no property '{1}'.
TS2461=Type '{0}' is not an array type.
TS2462=A rest element must be last in a destructuring pattern
TS2463=A binding pattern parameter cannot be optional in an implementation signature.
TS2464=A computed property name must be of type 'string', 'number', 'symbol', or 'any'.
TS2465='this' cannot be referenced in a computed property name.
TS2466='super' cannot be referenced in a computed property name.
TS2467=A computed property name cannot reference a type parameter from its containing type.
TS2468=Cannot find global value '{0}'.
TS2469=The '{0}' operator cannot be applied to type 'symbol'.
TS2470='Symbol' reference does not refer to the global Symbol constructor object.
TS2471=A computed property name of the form '{0}' must be of type 'symbol'.
TS2472=Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher.
TS2473=Enum declarations must all be const or non-const.
TS2474=In 'const' enum declarations member initializer must be constant expression.
TS2475='const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment.
TS2476=A const enum member can only be accessed using a string literal.
TS2477='const' enum member initializer was evaluated to a non-finite value.
TS2478='const' enum member initializer was evaluated to disallowed value 'NaN'.
TS2479=Property '{0}' does not exist on 'const' enum '{1}'.
TS2480='let' is not allowed to be used as a name in 'let' or 'const' declarations.
TS2481=Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'.
TS2483=The left-hand side of a 'for...of' statement cannot use a type annotation.
TS2484=Export declaration conflicts with exported declaration of '{0}'
TS2487=The left-hand side of a 'for...of' statement must be a variable or a property access.
TS2488=Type must have a '[Symbol.iterator]()' method that returns an iterator.
TS2489=An iterator must have a 'next()' method.
TS2490=The type returned by the 'next()' method of an iterator must have a 'value' property.
TS2491=The left-hand side of a 'for...in' statement cannot be a destructuring pattern.
TS2492=Cannot redeclare identifier '{0}' in catch clause
TS2493=Tuple type '{0}' with length '{1}' cannot be assigned to tuple with length '{2}'.
TS2494=Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher.
TS2495=Type '{0}' is not an array type or a string type.
TS2496=The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression.
TS2497=Module '{0}' resolves to a non-module entity and cannot be imported using this construct.
TS2498=Module '{0}' uses 'export =' and cannot be used with 'export *'.
TS2499=An interface can only extend an identifier/qualified-name with optional type arguments.
TS2500=A class can only implement an identifier/qualified-name with optional type arguments.
TS2501=A rest element cannot contain a binding pattern.
TS2502='{0}' is referenced directly or indirectly in its own type annotation.
TS2503=Cannot find namespace '{0}'.
TS2505=A generator cannot have a 'void' type annotation.
TS2506='{0}' is referenced directly or indirectly in its own base expression.
TS2507=Type '{0}' is not a constructor function type.
TS2508=No base constructor has the specified number of type arguments.
TS2509=Base constructor return type '{0}' is not a class or interface type.
TS2510=Base constructors must all have the same return type.
TS2511=Cannot create an instance of the abstract class '{0}'.
TS2512=Overload signatures must all be abstract or non-abstract.
TS2513=Abstract method '{0}' in class '{1}' cannot be accessed via super expression.
TS2514=Classes containing abstract methods must be marked abstract.
TS2515=Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'.
TS2516=All declarations of an abstract method must be consecutive.
TS2517=Cannot assign an abstract constructor type to a non-abstract constructor type.
TS2518=A 'this'-based type guard is not compatible with a parameter-based type guard.
TS2520=Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions.
TS2521=Expression resolves to variable declaration '{0}' that compiler uses to support async functions.
TS2522=The 'arguments' object cannot be referenced in an async function or method in ES3 and ES5. Consider using a standard function or method.
TS2523='yield' expressions cannot be used in a parameter initializer.
TS2524='await' expressions cannot be used in a parameter initializer.
TS2525=Initializer provides no value for this binding element and the binding element has no default value.
TS2526=A 'this' type is available only in a non-static member of a class or interface.
TS2527=The inferred type of '{0}' references an inaccessible 'this' type. A type annotation is necessary.
TS2528=A module cannot have multiple default exports.
TS2529=Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions.
TS2530=Property '{0}' is incompatible with index signature.
TS2531=Object is possibly 'null'.
TS2532=Object is possibly 'undefined'.
TS2533=Object is possibly 'null' or 'undefined'.
TS2534=A function returning 'never' cannot have a reachable end point.
TS2535=Enum type '{0}' has members with initializers that are not literals.
TS2536=Type '{0}' cannot be used to index type '{1}'.
TS2537=Type '{0}' has no matching index signature for type '{1}'.
TS2538=Type '{0}' cannot be used as an index type.
TS2539=Cannot assign to '{0}' because it is not a variable.
TS2540=Cannot assign to '{0}' because it is a constant or a read-only property.
TS2541=The target of an assignment must be a variable or a property access.
TS2542=Index signature in type '{0}' only permits reading.
TS2600=JSX element attributes type '{0}' may not be a union type.
TS2601=The return type of a JSX element constructor must return an object type.
TS2602=JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist.
TS2603=Property '{0}' in type '{1}' is not assignable to type '{2}'
TS2604=JSX element type '{0}' does not have any construct or call signatures.
TS2605=JSX element type '{0}' is not a constructor function for JSX elements.
TS2606=Property '{0}' of JSX spread attribute is not assignable to target property.
TS2607=JSX element class does not support attributes because it does not have a '{0}' property
TS2608=The global type 'JSX.{0}' may not have more than one property
TS2650=Cannot emit namespaced JSX elements in React
TS2651=A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.
TS2652=Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead.
TS2653=Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'.
TS2654=Exported external package typings file cannot contain tripleslash references. Please contact the package author to update the package definition.
TS2656=Exported external package typings file '{0}' is not a module. Please contact the package author to update the package definition.
TS2657=JSX expressions must have one parent element
TS2658=Type '{0}' provides no match for the signature '{1}'
TS2659='super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher.
TS2660='super' can only be referenced in members of derived classes or object literal expressions.
TS2661=Cannot export '{0}'. Only local declarations can be exported from a module.
TS2662=Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?
TS2663=Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?
TS2664=Invalid module name in augmentation, module '{0}' cannot be found.
TS2665=Invalid module name in augmentation. Module '{0}' resolves to an untyped module at '{1}', which cannot be augmented.
TS2666=Exports and export assignments are not permitted in module augmentations.
TS2667=Imports are not permitted in module augmentations. Consider moving them to the enclosing external module.
TS2668='export' modifier cannot be applied to ambient modules and module augmentations since they are always visible.
TS2669=Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.
TS2670=Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context.
TS2671=Cannot augment module '{0}' because it resolves to a non-module entity.
TS2672=Cannot assign a '{0}' constructor type to a '{1}' constructor type.
TS2673=Constructor of class '{0}' is private and only accessible within the class declaration.
TS2674=Constructor of class '{0}' is protected and only accessible within the class declaration.
TS2675=Cannot extend a class '{0}'. Class constructor is marked as private.
TS2676=Accessors must both be abstract or non-abstract.
TS2677=A type predicate's type must be assignable to its parameter's type.
TS2678=Type '{0}' is not comparable to type '{1}'.
TS2679=A function that is called with the 'new' keyword cannot have a 'this' type that is 'void'.
TS2680=A 'this' parameter must be the first parameter.
TS2681=A constructor cannot have a 'this' parameter.
TS2682='get' and 'set' accessor must have the same 'this' type.
TS2683='this' implicitly has type 'any' because it does not have a type annotation.
TS2684=The 'this' context of type '{0}' is not assignable to method's 'this' of type '{1}'.
TS2685=The 'this' types of each signature are incompatible.
TS2686='{0}' refers to a UMD global, but the current file is a module. Consider adding an import instead.
TS2687=All declarations of '{0}' must have identical modifiers.
TS2688=Cannot find type definition file for '{0}'.
TS2689=Cannot extend an interface '{0}'. Did you mean 'implements'?
TS2690=A class must be declared after its base class.
TS2691=An import path cannot end with a '{0}' extension. Consider importing '{1}' instead.
TS2692='{0}' is a primitive, but '{1}' is a wrapper object. Prefer using '{0}' when possible.
TS2693='{0}' only refers to a type, but is being used as a value here.
TS2694=Namespace '{0}' has no exported member '{1}'.
TS2695=Left side of comma operator is unused and has no side effects.
TS2696=The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?
TS2697=An async function or method must return a 'Promise'. Make sure you have a declaration for 'Promise' or include 'ES2015' in your `--lib` option.
TS2698=Spread types may only be created from object types.
TS2700=Rest types may only be created from object types.
TS2701=The target of an object rest assignment must be a variable or a property access.
TS2702='{0}' only refers to a type, but is being used as a namespace here.
TS4000=Import declaration '{0}' is using private name '{1}'.
TS4002=Type parameter '{0}' of exported class has or is using private name '{1}'.
TS4004=Type parameter '{0}' of exported interface has or is using private name '{1}'.
TS4006=Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.
TS4008=Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'.
TS4010=Type parameter '{0}' of public static method from exported class has or is using private name '{1}'.
TS4012=Type parameter '{0}' of public method from exported class has or is using private name '{1}'.
TS4014=Type parameter '{0}' of method from exported interface has or is using private name '{1}'.
TS4016=Type parameter '{0}' of exported function has or is using private name '{1}'.
TS4019=Implements clause of exported class '{0}' has or is using private name '{1}'.
TS4020=Extends clause of exported class '{0}' has or is using private name '{1}'.
TS4022=Extends clause of exported interface '{0}' has or is using private name '{1}'.
TS4023=Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named.
TS4024=Exported variable '{0}' has or is using name '{1}' from private module '{2}'.
TS4025=Exported variable '{0}' has or is using private name '{1}'.
TS4026=Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.
TS4027=Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'.
TS4028=Public static property '{0}' of exported class has or is using private name '{1}'.
TS4029=Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.
TS4030=Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'.
TS4031=Public property '{0}' of exported class has or is using private name '{1}'.
TS4032=Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'.
TS4033=Property '{0}' of exported interface has or is using private name '{1}'.
TS4034=Parameter '{0}' of public static property setter from exported class has or is using name '{1}' from private module '{2}'.
TS4035=Parameter '{0}' of public static property setter from exported class has or is using private name '{1}'.
TS4036=Parameter '{0}' of public property setter from exported class has or is using name '{1}' from private module '{2}'.
TS4037=Parameter '{0}' of public property setter from exported class has or is using private name '{1}'.
TS4038=Return type of public static property getter from exported class has or is using name '{0}' from external module {1} but cannot be named.
TS4039=Return type of public static property getter from exported class has or is using name '{0}' from private module '{1}'.
TS4040=Return type of public static property getter from exported class has or is using private name '{0}'.
TS4041=Return type of public property getter from exported class has or is using name '{0}' from external module {1} but cannot be named.
TS4042=Return type of public property getter from exported class has or is using name '{0}' from private module '{1}'.
TS4043=Return type of public property getter from exported class has or is using private name '{0}'.
TS4044=Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'.
TS4045=Return type of constructor signature from exported interface has or is using private name '{0}'.
TS4046=Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'.
TS4047=Return type of call signature from exported interface has or is using private name '{0}'.
TS4048=Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'.
TS4049=Return type of index signature from exported interface has or is using private name '{0}'.
TS4050=Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named.
TS4051=Return type of public static method from exported class has or is using name '{0}' from private module '{1}'.
TS4052=Return type of public static method from exported class has or is using private name '{0}'.
TS4053=Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named.
TS4054=Return type of public method from exported class has or is using name '{0}' from private module '{1}'.
TS4055=Return type of public method from exported class has or is using private name '{0}'.
TS4056=Return type of method from exported interface has or is using name '{0}' from private module '{1}'.
TS4057=Return type of method from exported interface has or is using private name '{0}'.
TS4058=Return type of exported function has or is using name '{0}' from external module {1} but cannot be named.
TS4059=Return type of exported function has or is using name '{0}' from private module '{1}'.
TS4060=Return type of exported function has or is using private name '{0}'.
TS4061=Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named.
TS4062=Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'.
TS4063=Parameter '{0}' of constructor from exported class has or is using private name '{1}'.
TS4064=Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'.
TS4065=Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.
TS4066=Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'.
TS4067=Parameter '{0}' of call signature from exported interface has or is using private name '{1}'.
TS4068=Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named.
TS4069=Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'.
TS4070=Parameter '{0}' of public static method from exported class has or is using private name '{1}'.
TS4071=Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named.
TS4072=Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'.
TS4073=Parameter '{0}' of public method from exported class has or is using private name '{1}'.
TS4074=Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'.
TS4075=Parameter '{0}' of method from exported interface has or is using private name '{1}'.
TS4076=Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named.
TS4077=Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'.
TS4078=Parameter '{0}' of exported function has or is using private name '{1}'.
TS4081=Exported type alias '{0}' has or is using private name '{1}'.
TS4082=Default export of the module has or is using private name '{0}'.
TS4083=Type parameter '{0}' of exported type alias has or is using private name '{1}'.
TS4090=Conflicting definitions for '{0}' found at '{1}' and '{2}'. Consider installing a specific version of this library to resolve the conflict.
TS4091=Parameter '{0}' of index signature from exported interface has or is using name '{1}' from private module '{2}'.
TS4092=Parameter '{0}' of index signature from exported interface has or is using private name '{1}'.
TS5001=The current host does not support the '{0}' option.
TS5009=Cannot find the common subdirectory path for the input files.
TS5010=File specification cannot end in a recursive directory wildcard ('**'): '{0}'.
TS5011=File specification cannot contain multiple recursive directory wildcards ('**'): '{0}'.
TS5012=Cannot read file '{0}': {1}
TS5013=Unsupported file encoding.
TS5014=Failed to parse file '{0}': {1}.
TS5023=Unknown compiler option '{0}'.
TS5024=Compiler option '{0}' requires a value of type {1}.
TS5033=Could not write file '{0}': {1}
TS5042=Option 'project' cannot be mixed with source files on a command line.
TS5047=Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher.
TS5051=Option '{0} can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided.
TS5052=Option '{0}' cannot be specified without specifying option '{1}'.
TS5053=Option '{0}' cannot be specified with option '{1}'.
TS5054=A 'tsconfig.json' file is already defined at: '{0}'.
TS5055=Cannot write file '{0}' because it would overwrite input file.
TS5056=Cannot write file '{0}' because it would be overwritten by multiple input files.
TS5057=Cannot find a tsconfig.json file at the specified directory: '{0}'
TS5058=The specified path does not exist: '{0}'
TS5059=Invalid value for '--reactNamespace'. '{0}' is not a valid identifier.
TS5060=Option 'paths' cannot be used without specifying '--baseUrl' option.
TS5061=Pattern '{0}' can have at most one '*' character
TS5062=Substitution '{0}' in pattern '{1}' in can have at most one '*' character
TS5063=Substitutions for pattern '{0}' should be an array.
TS5064=Substitution '{0}' for pattern '{1}' has incorrect type, expected 'string', got '{2}'.
TS5065=File specification cannot contain a parent directory ('..') that appears after a recursive directory wildcard ('**'): '{0}'.
TS5066=Substitutions for pattern '{0}' shouldn't be an empty array.
TS5067=Invalid value for 'jsxFactory'. '{0}' is not a valid identifier or qualified-name.
TS6001=Concatenate and emit output to single file.
TS6002=Generates corresponding '.d.ts' file.
TS6003=Specify the location where debugger should locate map files instead of generated locations.
TS6004=Specify the location where debugger should locate TypeScript files instead of source locations.
TS6005=Watch input files.
TS6006=Redirect output structure to the directory.
TS6007=Do not erase const enum declarations in generated code.
TS6008=Do not emit outputs if any errors were reported.
TS6009=Do not emit comments to output.
TS6010=Do not emit outputs.
TS6011=Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
TS6012=Skip type checking of declaration files.
TS6015=Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
TS6016=Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
TS6017=Print this message.
TS6019=Print the compiler's version.
TS6020=Compile the project in the given directory.
TS6023=Syntax: {0}
TS6024=options
TS6025=file
TS6026=Examples: {0}
TS6027=Options:
TS6029=Version {0}
TS6030=Insert command line options and files from a file.
TS6032=File change detected. Starting incremental compilation...
TS6034=KIND
TS6035=FILE
TS6036=VERSION
TS6037=LOCATION
TS6038=DIRECTORY
TS6039=STRATEGY
TS6042=Compilation complete. Watching for file changes.
TS6043=Generates corresponding '.map' file.
TS6044=Compiler option '{0}' expects an argument.
TS6045=Unterminated quoted string in response file '{0}'.
TS6046=Argument for '{0}' option must be: {1}
TS6048=Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.
TS6049=Unsupported locale '{0}'.
TS6050=Unable to open file '{0}'.
TS6051=Corrupted locale file {0}.
TS6052=Raise error on expressions and declarations with an implied 'any' type.
TS6053=File '{0}' not found.
TS6054=File '{0}' has unsupported extension. The only supported extensions are {1}.
TS6055=Suppress noImplicitAny errors for indexing objects lacking index signatures.
TS6056=Do not emit declarations for code that has an '@internal' annotation.
TS6058=Specify the root directory of input files. Use to control the output directory structure with --outDir.
TS6059=File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files.
TS6060=Specify the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix).
TS6061=NEWLINE
TS6064=Option '{0}' can only be specified in 'tsconfig.json' file.
TS6065=Enables experimental support for ES7 decorators.
TS6066=Enables experimental support for emitting type metadata for decorators.
TS6068=Enables experimental support for ES7 async functions.
TS6069=Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
TS6070=Initializes a TypeScript project and creates a tsconfig.json file.
TS6071=Successfully created a tsconfig.json file.
TS6072=Suppress excess property checks for object literals.
TS6073=Stylize errors and messages using color and context. (experimental)
TS6074=Do not report errors on unused labels.
TS6075=Report error when not all code paths in function return a value.
TS6076=Report errors for fallthrough cases in switch statement.
TS6077=Do not report errors on unreachable code.
TS6078=Disallow inconsistently-cased references to the same file.
TS6079=Specify library files to be included in the compilation: 
TS6080=Specify JSX code generation: 'preserve' or 'react'
TS6081=File '{0}' has an unsupported extension, so skipping it.
TS6082=Only 'amd' and 'system' modules are supported alongside --{0}.
TS6083=Base directory to resolve non-absolute module names.
TS6084=Specify the object invoked for createElement and __spread when targeting 'react' JSX emit
TS6085=Enable tracing of the name resolution process.
TS6086========= Resolving module '{0}' from '{1}'. ========
TS6087=Explicitly specified module resolution kind: '{0}'.
TS6088=Module resolution kind is not specified, using '{0}'.
TS6089========= Module name '{0}' was successfully resolved to '{1}'. ========
TS6090========= Module name '{0}' was not resolved. ========
TS6091='paths' option is specified, looking for a pattern to match module name '{0}'.
TS6092=Module name '{0}', matched pattern '{1}'.
TS6093=Trying substitution '{0}', candidate module location: '{1}'.
TS6094=Resolving module name '{0}' relative to base url '{1}' - '{2}'.
TS6095=Loading module as file / folder, candidate module location '{0}'.
TS6096=File '{0}' does not exist.
TS6097=File '{0}' exist - use it as a name resolution result.
TS6098=Loading module '{0}' from 'node_modules' folder.
TS6099=Found 'package.json' at '{0}'.
TS6100='package.json' does not have a 'types' or 'main' field.
TS6101='package.json' has '{0}' field '{1}' that references '{2}'.
TS6102=Allow javascript files to be compiled.
TS6103=Option '{0}' should have array of strings as a value.
TS6104=Checking if '{0}' is the longest matching prefix for '{1}' - '{2}'.
TS6105=Expected type of '{0}' field in 'package.json' to be 'string', got '{1}'.
TS6106='baseUrl' option is set to '{0}', using this value to resolve non-relative module name '{1}'
TS6107='rootDirs' option is set, using it to resolve relative module name '{0}'
TS6108=Longest matching prefix for '{0}' is '{1}'
TS6109=Loading '{0}' from the root dir '{1}', candidate location '{2}'
TS6110=Trying other entries in 'rootDirs'
TS6111=Module resolution using 'rootDirs' has failed
TS6112=Do not emit 'use strict' directives in module output.
TS6113=Enable strict null checks.
TS6114=Unknown option 'excludes'. Did you mean 'exclude'?
TS6115=Raise error on 'this' expressions with an implied 'any' type.
TS6116========= Resolving type reference directive '{0}', containing file '{1}', root directory '{2}'. ========
TS6117=Resolving using primary search paths...
TS6118=Resolving from node_modules folder...
TS6119========= Type reference directive '{0}' was successfully resolved to '{1}', primary: {2}. ========
TS6120========= Type reference directive '{0}' was not resolved. ========
TS6121=Resolving with primary search path '{0}'
TS6122=Root directory cannot be determined, skipping primary search paths.
TS6123========= Resolving type reference directive '{0}', containing file '{1}', root directory not set. ========
TS6124=Type declaration files to be included in compilation.
TS6125=Looking up in 'node_modules' folder, initial location '{0}'
TS6126=Containing file is not specified and root directory cannot be determined, skipping lookup in 'node_modules' folder.
TS6127========= Resolving type reference directive '{0}', containing file not set, root directory '{1}'. ========
TS6128========= Resolving type reference directive '{0}', containing file not set, root directory not set. ========
TS6129=The config file '{0}' found doesn't contain any source files.
TS6130=Resolving real path for '{0}', result '{1}'
TS6131=Cannot compile modules using option '{0}' unless the '--module' flag is 'amd' or 'system'.
TS6132=File name '{0}' has a '{1}' extension - stripping it
TS6133='{0}' is declared but never used.
TS6134=Report errors on unused locals.
TS6135=Report errors on unused parameters.
TS6136=The maximum dependency depth to search under node_modules and load JavaScript files
TS6137=No types specified in 'package.json', so returning 'main' value of '{0}'
TS6138=Property '{0}' is declared but never used.
TS6139=Import emit helpers from 'tslib'.
TS6140=Auto discovery for typings is enabled in project '{0}'. Running extra resolution pass for module '{1}' using cache location '{2}'.
TS6141=Parse in strict mode and emit "use strict" for each source file
TS6142=Module '{0}' was resolved to '{1}', but '--jsx' is not set.
TS6143=Module '{0}' was resolved to '{1}', but '--allowJs' is not set.
TS6144=Module '{0}' was resolved as locally declared ambient module in file '{1}'.
TS6145=Module '{0}' was resolved as ambient module declared in '{1}' since this file was not modified.
TS6146=Specify the JSX factory function to use when targeting 'react' JSX emit, e.g. 'React.createElement' or 'h'.
TS6147=Resolution for module '{0}' was found in cache
TS7005=Variable '{0}' implicitly has an '{1}' type.
TS7006=Parameter '{0}' implicitly has an '{1}' type.
TS7008=Member '{0}' implicitly has an '{1}' type.
TS7009='new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
TS7010='{0}', which lacks return-type annotation, implicitly has an '{1}' return type.
TS7011=Function expression, which lacks return-type annotation, implicitly has an '{0}' return type.
TS7013=Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.
TS7015=Element implicitly has an 'any' type because index expression is not of type 'number'.
TS7016=Could not find a declaration file for module '{0}'. '{1}' implicitly has an 'any' type.
TS7017=Element implicitly has an 'any' type because type '{0}' has no index signature.
TS7018=Object literal's property '{0}' implicitly has an '{1}' type.
TS7019=Rest parameter '{0}' implicitly has an 'any[]' type.
TS7020=Call signature, which lacks return-type annotation, implicitly has an 'any' return type.
TS7022='{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.
TS7023='{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
TS7024=Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.
TS7025=Generator implicitly has type '{0}' because it does not yield any values. Consider supplying a return type.
TS7026=JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists
TS7027=Unreachable code detected.
TS7028=Unused label.
TS7029=Fallthrough case in switch.
TS7030=Not all code paths return a value.
TS7031=Binding element '{0}' implicitly has an '{1}' type.
TS7032=Property '{0}' implicitly has type 'any', because its set accessor lacks a parameter type annotation.
TS7033=Property '{0}' implicitly has type 'any', because its get accessor lacks a return type annotation.
TS7034=Variable '{0}' implicitly has type '{1}' in some locations where its type cannot be determined.
TS8000=You cannot rename this element.
TS8001=You cannot rename elements that are defined in the standard TypeScript library.
TS8002='import ... =' can only be used in a .ts file.
TS8003='export=' can only be used in a .ts file.
TS8004='type parameter declarations' can only be used in a .ts file.
TS8005='implements clauses' can only be used in a .ts file.
TS8006='interface declarations' can only be used in a .ts file.
TS8007='module declarations' can only be used in a .ts file.
TS8008='type aliases' can only be used in a .ts file.
TS8009='{0}' can only be used in a .ts file.
TS8010='types' can only be used in a .ts file.
TS8011='type arguments' can only be used in a .ts file.
TS8012='parameter modifiers' can only be used in a .ts file.
TS8015='enum declarations' can only be used in a .ts file.
TS8016='type assertion expressions' can only be used in a .ts file.
TS9002=Only identifiers/qualified-names with optional type arguments are currently supported in a class 'extends' clauses.
TS9003='class' expressions are not currently supported.
TS9004=Language service is disabled.
TS17000=JSX attributes must only be assigned a non-empty 'expression'.
TS17001=JSX elements cannot have multiple attributes with the same name.
TS17002=Expected corresponding JSX closing tag for '{0}'.
TS17003=JSX attribute expected.
TS17004=Cannot use JSX unless the '--jsx' flag is provided.
TS17005=A constructor cannot contain a 'super' call when its class extends 'null'
TS17006=An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.
TS17007=A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.
TS17008=JSX element '{0}' has no corresponding closing tag.
TS17009='super' must be called before accessing 'this' in the constructor of a derived class.
TS17010=Unknown type acquisition option '{0}'.
TS17011='super' must be called before accessing a property of 'super' in the constructor of a derived class.
TS18000=Circularity detected while resolving configuration: {0}
TS18001=A path in an 'extends' option must be relative or rooted, but '{0}' is not.
TS18002=The 'files' list in config file '{0}' is empty.
TS18003=No inputs were found in config file '{0}'. Specified 'include' paths were '{1}' and 'exclude' paths were '{2}'.
TS90001=Add missing 'super()' call.
TS90002=Make 'super()' call the first statement in the constructor.
TS90003=Change 'extends' to 'implements'
TS90004=Remove unused identifiers
TS90005=Implement interface on reference
TS90006=Implement interface on class
TS90007=Implement inherited abstract class
TS90009=Adding a tsconfig.json file will help organize projects that contain both TypeScript and JavaScript files. Learn more at https://aka.ms/tsconfig
TS90010=Type '{0}' is not assignable to type '{1}'. Two different types with this name exist, but they are unrelated.
TS90013=Import {0} from {1}
TS90014=Change {0} to {1}
TS90015=Add {0} to existing import declaration from {1}
TS8017=Octal literal types must use ES2015 syntax. Use the syntax '{0}'.
Module\ not\ found=Module not found
Module\ parse\ failed=Module parse failed
